#!/bin/bash
#
# This script takes a filename as an argument, and outputs signed,
# little-endian, 16-bit, 2 channel audio on standard output, errors
# to standard error and tweets the name of a tune on loading the next
# one. Make sure all your filenames match the following format:
# '$nr $artist - $title.$ext' or '$artist - $title.$ext'
#
# You can adjust this script yourself to customise the support for
# different file formats and codecs.

FILE="$1"

# file that the name of the last played track gets written to
# gets deleted on execution of the xwax start script
LPLYD="/tmp/xwax_last_played.txt"

# define your twitter client - there are several cli clients out there
# f.e. bti (http://gregkh.github.com/bti/)
TCLI=`which bti`

# check if a track had been loaded before. if so, tweet it.
if [ -f $LPLYD ]; then
TUNE=$(cat $LPLYD)
    # determine filetype extension
    EXT=${TUNE##*.}
    # trim filename to '$artist - $title'
    TWITUNE=$(echo $TUNE | sed "s/^[0-9]*\ //;s/\.$EXT$//")
    # define tweet message (clientside url shortening recommended)
    TWEET="#nowplaying: $TWITUNE http://streaming.fueralle.org:8000/radiot.ogg.m3u #dnb #drumandbass"
    # tweet and redirect stdout to stderr
    echo $TWEET | $TCLI >&2 &
else
unset TWITUNE
fi

echo $(basename "$FILE") > $LPLYD

case "$FILE" in

*.ogg)
    echo "Calling Ogg decoder..." >&2
    exec oggdec -Q --bits 16 --endianness 0 --sign 1 --raw --output - "$FILE"
    ;;

*.aac)
    echo "Calling AAC decoder..." >&2
    exec faad -b 1 -f 2 -w "$FILE"
    ;;

*.cdaudio)
    echo "Calling CD extract..." >&2
    exec cdparanoia -r `cat "$FILE"` -
    ;;

*.mp3)
    echo "Calling MP3 decoder..." >&2
    exec mpg123 -q -s --rate 44100 --stereo "$FILE"
    ;;

*.flac)
    echo "Calling FLAC decoder..." >&2
    exec flac -d -c -s --force-raw-format --sign=signed --endian=little "$FILE"
    ;;

*)
    echo "Calling fallback decoder..." >&2
    exec ffmpeg -v 0 -i "$FILE" -f s16le -ar 44100 -
    #exec sox "$FILE" -t raw -s -
    ;;

esac
