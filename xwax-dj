#!/bin/bash

# start script for xwaxed (http://sighter.ath.cx/cgit/cgit.cgi/xwaxed/)
# xwaxed is a fork of xwax (http://www.xwax.co.uk)
# script by rcn @ irc.freenode.net
# get the latest version at https://github.com/bitcrush/xwax-scripts
#
# all configuration is done in the config file (default: ~/.xwax/config).

# functions {{{
errorexit() { echo "error: $*" >&2; exit 1; }

helpscreen() {
    echo
    echo -e "start script for xwaxed (http://sighter.ath.cx/cgit/cgit.cgi/xwaxed/)"
    echo -e "by rcn @ irc.freenode.net"
    echo
    echo -e "usage:\t${0##*/} [<options>]"
    echo
    echo -e "  -h:\tprint this screen"
    echo -e "  -l:\tcreate a playlist from current session (filename w/o extension)"
    echo -e "  -L:\tcreate a loadable playlist from current session (full filename)"
    echo -e "  -p:\tuse deck protection (overrides config setting)"
    echo -e "  -s:\tload previous sessions as separate crates"
    echo -e "  -t:\ttweet each loaded track"
    echo
}

find_audio_files() {
    # search folder for audio files and stop after first match
    find $1 -follow -iname '*.ogg' -o \
                    -iname '*.aac' -o \
                    -iname '*.cdaudio' -o \
                    -iname '*.mp3' -o \
                    -iname '*.flac' -o \
                    -iname '*.m4a' -o \
                    -iname '*.wav' | grep -m1 -
}

create_tc_string() {
    # create a string from each timecode array
    for i in ${TC1[@]}; do TC1S+="-t $i "; done
    for i in ${TC2[@]}; do TC2S+="-t $i "; done
}

create_cr_string() {
    # create a string from all the crates specified in the CRATE array
    for crate in ${CRATE[@]}
    do
        if [[ $NO_EMPTY = 1 ]]; then
            [[ `find_audio_files $crate | wc -l` != 0 ]] && CRATES+="-l \"$crate\" "
        else
            CRATES+="-l \"$crate\" "
        fi
    done
}

create_cs_string() {
    # create a string from the sub folders of those crates specified in the CRATEX array
    IFS=$'\n'
    for crate in ${CRATEX[@]}
    do
        while read -r scrate
        do
            if [[ $NO_EMPTY = 1 ]]; then
                [[ `find_audio_files $scrate | wc -l` != 0 ]] && CRATES+="-l \"$scrate\" "
            else
                CRATES+="-l \"$scrate\" "
            fi
        done < <(find $crate -follow -type d)
    done
    unset IFS
}

create_pl_string() {
    # create a string from all nonempty playlists found in $PLAYLISTS
    IFS=$'\n'
    LISTARRAY=($(find $PLAYLISTS -type f ! -iname '.current'))
    tLen=${#LISTARRAY[@]}
    unset IFS
    
    for (( i=0; i<${tLen}; i++ ));
    do
        [[ -s ${LISTARRAY[$i]} ]] && LISTS+="-p \"${LISTARRAY[$i]}\" "
    done
}

create_ss_string() {
    # create a string from all nonempty playlists found in $SS_PATH
    IFS=$'\n'
    SESSIONARRAY=($(find $SS_PATH -type f))
    tLen=${#SESSIONARRAY[@]}
    unset IFS
    
    for (( i=0; i<${tLen}; i++ ));
    do
        [[ -s ${SESSIONARRAY[$i]} ]] && SESSIONS+="-p \"${SESSIONARRAY[$i]}\" "
    done
}

# }}}

# source configuration file
export CONFIGFILE="$HOME/.xwax/config"
export TW_SWITCH=0
export LOG_SWITCH=0
export SS_SWITCH=0
export LOAD_SS=0

[[ -r $CONFIGFILE ]] && source $CONFIGFILE || errorexit "$CONFIGFILE doesn't exist or is not readable by the user."

# evaluate command line parameters
while getopts ":hlLpst" opt; do
    case "$opt" in
        'h')    helpscreen; exit 0 ;;
        'l')    [[ -d $LOG_PATH ]] || mkdir -p "$LOG_PATH"
                export LOG_SWITCH=1
                export LOG_FILE
                ;;
        'L')    [[ -d $SS_PATH ]] || mkdir -p "$SS_PATH"
                export SS_SWITCH=1
                export SS_FILE
                ;;
        'p')    PROT=1 ;;
        's')    LOAD_SS=1 ;;
        't')    [[ `which $TW_CLI` ]] || errorexit "$TW_CLI not found"
                export TW_SWITCH=1
                export TW_CLI
                export TW_LPLYD
                export TW_MSG
                ;;
        '?')    errorexit "Unknown option \"-$OPTARG\". Use -h for help." ;;
        *)      helpscreen
                errorexit "Unknown error while processing options"
                ;;
    esac
done

# delete last_played file at startup (if exists)
[[ -f $TW_LPLYD ]] && rm $TW_LPLYD

# check for deck protection
[[ $PROT -eq 1 ]] && PROT="-dp " || unset PROT

# create strings
create_tc_string
create_cr_string
create_cs_string
create_pl_string
[[ $LOAD_SS -eq 1 ]] && create_ss_string

# generate command line
START="$XWAX $PROT -r $SRATE -i $IMPORT -s $SCAN $CRATES $LISTS $SESSIONS -m $BTIME \
$TC1S -${RPM[1]} -a ${DECK[1]} $TC2S -${RPM[2]} -a ${DECK[2]}"

# run xwax
sh <<<"$START"

# vim: fdm=marker ts=4 sw=4
