#!/bin/bash
# vim: fdm=marker ts=4 sw=4

# start script for xwax (http://www.xwax.co.uk)
# by rcn @ irc.freenode.net
# get the latest version from https://github.com/bitcrush/xwax-scripts
#
# all configuration is done in the config file (default: ~/.xwax/config).

# functions {{{
errorexit() { echo; echo "error: $*"; echo; exit 1; }

helpscreen() {
    echo
    echo -e "start script for xwax (http://www.xwax.co.uk)"
    echo -e "by rcn @ irc.freenode.net"
    echo
    echo -e "usage:\t ${0##*/} [<options>]"
    echo
    echo -e "  -h:\tprint this screen"
    echo -e "  -log:\tlog played tracks to file"
    echo -e "  -n:\tcheck for nonempty crates before adding"
    echo -e "  -tw:\tuse the import-twitter script for playlist tweeting"
    echo 
}

find_audio_files() {
    find $1 -follow -iname '*.ogg' -o \
                    -iname '*.aac' -o \
                    -iname '*.cdaudio' -o \
                    -iname '*.mp3' -o \
                    -iname '*.flac' -o \
                    -iname '*.m4a' -o \
                    -iname '*.wav' | grep -m1 -
}

create_tc_string() {
    # create a string for each timecode array
    for tc1 in ${TC1[@]}; do TC1S+="-t $tc1 "; done
    for tc2 in ${TC2[@]}; do TC2S+="-t $tc2 "; done
}

create_cr_string() {
    # create a string from all the non-empty crates specified in the CRATE array
    for crate in ${CRATE[@]}
    do
        if [[ $CHECK_NONEMPTY = 1 ]]; then
            [[ `find_audio_files $crate | wc -l` != 0 ]] && CRATES+="-l \"$crate\" "
        else
            CRATES+="-l \"$crate\" "
        fi
    done
}

create_cs_string() {
    # create a string from all non-empty sub folders specified in the CRATEX array
    IFS=$'\n'
    for crate in ${CRATEX[@]}
    do
        for scrate in `find $crate -maxdepth 1 -type d`
        do
            CRATES+="-l \"$scrate\" "
        done
    done
    unset IFS
}

create_pl_string() {
    # create a string from all playlists found in $PLAYLISTS
    IFS=$'\n'
    LISTARRAY=($(find $PLAYLISTS -type f ! -iname '.current'))
    tLen=${#LISTARRAY[@]}
    unset IFS
    
    for (( i=0; i<${tLen}; i++ ));
    do
        [[ -s ${LISTARRAY[$i]} ]] && LISTS+="-p \"${LISTARRAY[$i]}\" "
    done
}

# }}}

# source configuration file
export CONFIGFILE="$HOME/.xwax/config"
export TW_SWITCH=0
export LOG_SWITCH=0

[[ -r $CONFIGFILE ]] && source $CONFIGFILE || errorexit "$CONFIGFILE doesn't exist or is not readable by the user."

# evaluate command line parameters
for (( i=1; i<=$#; i++ )) ; do
    case ${!i} in
        '-h'|'--help')
                helpscreen; exit 0
                ;;
        '-log') [[ -d $LOG_PATH ]] || mkdir -p "$LOG_PATH"
                export LOG_SWITCH=1
                export LOG_FILE
                ;;
        '-n')   CHECK_NONEMPTY=1
                ;;
        '-tw')  [[ -e `which $TW_CLI` ]] || errorexit "$TW_CLI not found"
                export TW_SWITCH=1
                export TW_CLI
                export TW_LPLYD
                export TW_MSG
                ;;
        *)      helpscreen
                errorexit "unknown option ${!i}. aborting ..."
                ;;
    esac
done

# delete last_played file at startup (if exists)
[[ -f $TW_LPLYD ]] && rm $TW_LPLYD

# check for deck protection
[[ $PROT -eq 1 ]] && PROT="-dp " || unset PROT

# create strings
create_tc_string
create_cr_string
create_cs_string
create_pl_string

# generate command line
START="$XWAX $PROT -r $SRATE -i $IMPORT -s $SCAN $CRATES $LISTS -m $BTIME $TC1S -$RPM1 -a $DECK1 $TC2S -$RPM2 -a $DECK2"

# run xwax
echo $START | sh

