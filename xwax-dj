#!/bin/bash

# start script for xwax / xwaxed / s-xwax
# xwaxed: http://sighter.ath.cx/cgit/cgit.cgi/xwaxed/
# s-xwax: https://github.com/doublerebel/s-xwax
# xwaxed and s-xwax are forks of xwax (http://www.xwax.co.uk)
#
# script by rcn @ irc.freenode.net
# get the latest version at https://github.com/bitcrush/xwax-scripts
#
# all configuration is done in the config file (default: ~/.config/xwax/xwaxrc).

# functions {{{
errorexit() { echo "error: $*" >&2; exit 1; }

helpscreen() {
    echo
    echo -e "start script for xwax / xwaxed / s-xwax"
    echo -e "by rcn @ irc.freenode.net"
    echo
    echo -e "usage:\t${0##*/} [<options>]"
    echo
    echo -e "  -h:\tprint this screen"
    echo -e "  -d:\tspecify single deck to initiate"
    echo -e "  -l:\tlog loaded tracks to file (filename w/o extension and leading nr)"
    echo -e "  -s:\tlog session to a playlist file (full filename)"
    echo -e "  -S:\tload previous sessions as separate crates"
    echo -e "  -t:\ttweet each loaded track"
    echo
}

detect_card() {
    # look for known audio cards
    for CARD in SL1 Audio4DJ Audio8DJ; do
        if [[ `grep -o $CARD /proc/asound/cards` == $CARD ]]; then
            if  [[ $CARD == "SL1" ]]; then
                CARDNR=$(grep -oP "[0-9]+(?=.*$CARD)" /proc/asound/cards)
                DECK[1]="hw:$CARDNR,0"
                DECK[2]="hw:$CARDNR,1"
            else
                DECK[1]="plughw:$CARD,0,0"
                DECK[2]="plughw:$CARD,0,1"
            fi
        fi
    done
}

find_audio_files() {
    # search folder for audio files and stop after first match
    find $1 -follow -iname '*.ogg' -o \
                    -iname '*.aac' -o \
                    -iname '*.cdaudio' -o \
                    -iname '*.mp3' -o \
                    -iname '*.flac' -o \
                    -iname '*.m4a' -o \
                    -iname '*.aif' -o \
                    -iname '*.aiff' -o \
                    -iname '*.wav' | grep -m1 -
}

create_tc_string() {
    # create a string from each timecode array
    for i in ${TC1[@]}; do TC1S+="-t $i "; done
    for i in ${TC2[@]}; do TC2S+="-t $i "; done
}

create_cr_string() {
    # create a string from all the crates specified in the CRATE array
    for crate in ${CRATE[@]}
    do
        if [[ $NO_EMPTY = 1 ]]; then
            [[ `find_audio_files $crate | wc -l` != 0 ]] && CRATES+="-l \"$crate\" "
        else
            CRATES+="-l \"$crate\" "
        fi
    done
}

create_cs_string() {
    # create a string from the sub folders of those crates specified in the CRATEX array
    IFS=$'\n'
    for crate in ${CRATEX[@]}
    do
        while read -r scrate
        do
            if [[ $NO_EMPTY = 1 ]]; then
                [[ `find_audio_files $scrate | wc -l` != 0 ]] && CRATES+="-l \"$scrate\" "
            else
                CRATES+="-l \"$scrate\" "
            fi
        done < <(find $crate -follow -type d)
    done
    unset IFS
}

create_pl_string() {
    # create a string from all nonempty playlists found in $PLAYLISTS
    IFS=$'\n'
    LISTARRAY=($(find $PLAYLISTS -type f ! -iname '.current'))
    tLen=${#LISTARRAY[@]}
    unset IFS
    
    for (( i=0; i<${tLen}; i++ ));
    do
        [[ -s ${LISTARRAY[$i]} ]] && LISTS+="-p \"${LISTARRAY[$i]}\" "
    done
}

create_ss_string() {
    # create a string from all nonempty playlists found in $SS_PATH
    IFS=$'\n'
    SESSIONARRAY=($(find $SS_PATH -type f))
    tLen=${#SESSIONARRAY[@]}
    unset IFS
    
    for (( i=0; i<${tLen}; i++ ));
    do
        [[ -s ${SESSIONARRAY[$i]} ]] && SESSIONS+="-p \"${SESSIONARRAY[$i]}\" "
    done
}

create_dk_string() {
    # create a string from all devices found in $DECK array
    if [[ -z $DECKNR ]]; then
        for d in $(seq ${#DECK[@]});
        do
            DECKS+="$(eval echo \$TC$(echo $d)S -${RPM[$d]} -a ${DECK[$d]}) "
        done
    else
        DECKS+="$(eval echo \$TC$(echo $DECKNR)S -${RPM[$DECKNR]} -a ${DECK[$DECKNR]}) "
    fi
}

tweet() {
    # save previously loaded track to variable
    TW_TUNE=$(cat "$TW_LPLYD")

    # tweet in background and redirect stdout to stderr
    TWEET=$(printf "$TW_MSG\n" "$TW_TUNE")
    echo "$TWEET" | "$TW_CLI" >&2 &
}

close() {
    # on EXIT tweet last loaded track
    [[ $TW_SWITCH -eq 1 && $TW_ON_EXIT -eq 1 ]] && tweet
    echo -ne "\nBye ;)\n" >&2 &
    exit 0
}

# }}}

# source configuration file and set defaults
export CONFIGFILE="$HOME/.config/xwax/xwaxrc"
export TW_SWITCH=0
export LOG_SWITCH=0
export SS_SWITCH=0
export LOAD_SS=0
export -f tweet
unset DECKNR

[[ -r $CONFIGFILE ]] && source $CONFIGFILE || errorexit "$CONFIGFILE doesn't exist or is not readable by the user."

# trap EXIT (closing xwax)
[[ $1 != "-h" ]] && trap close EXIT

# evaluate command line parameters
while getopts ":hd:lsSt" opt; do
    case "$opt" in
        'h')    helpscreen; exit 0 ;;
        'd')    DECKNR=$OPTARG
                [[ $DECKNR == [1-${#DECK[@]}] ]] || errorexit "Deck number is out of range"
                ;;
        'l')    [[ -d $LOG_PATH ]] || mkdir -p "$LOG_PATH"
                export LOG_SWITCH=1
                export LOG_FILE
                ;;
        's')    [[ -d $SS_PATH ]] || mkdir -p "$SS_PATH"
                export SS_SWITCH=1
                export SS_FILE
                ;;
        'S')    LOAD_SS=1 ;;
        't')    [[ `which $TW_CLI` ]] || errorexit "$TW_CLI not found"
                export TW_SWITCH=1
                export TW_CLI
                export TW_LPLYD
                export TW_MSG
                ;;
        '?')    errorexit "Unknown option \"-$OPTARG\". Use -h for help." ;;
        *)      helpscreen
                errorexit "Unknown error while processing options"
                ;;
    esac
done

# delete last_played file at startup (if exists)
[[ -f $TW_LPLYD ]] && rm $TW_LPLYD

# if configured set deck protection (only if supported, else ignore)
DP=$($XWAX -h 2>&1 | grep -io 'deck protection')
[[ $PROT -eq 1 && -n $DP ]] && PROT="-dp " || unset PROT

# create strings
create_tc_string
create_cr_string
create_cs_string
create_pl_string
create_dk_string
[[ $LOAD_SS -eq 1 ]] && create_ss_string

# detect sound card
[[ $DETECT -eq 1 ]] && detect_card

# generate command line
START="$XWAX $PROT -r $SRATE -i $IMPORT -s $SCAN $CRATES $LISTS $SESSIONS -m $BTIME $DECKS"

# run xwax
eval "$START"

# vim: fdm=marker ts=4 sw=4
